# -*- coding: utf-8 -*-
"""edututor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17V3aDZpJ7DY4qhjDKbLoGjo6Po72n9Qa
"""

# Uncomment below line if you're running in Google Colab or a fresh environment
# !pip install transformers torch gradio --quiet

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Model Name - You can change this to any compatible Hugging Face model
model_name = "ibm-granite/granite-3.2-2b-instruct" # Change if needed

# Load tokenizer and model
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Fix pad token if missing
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# -----------------------------
# Helper Function to Generate Responses
# -----------------------------
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# -----------------------------
# Feature 1: Concept Explanation
# -----------------------------
def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in detail with examples."
    return generate_response(prompt, max_length=1000)

# -----------------------------
# Feature 2: Quiz Generator
# -----------------------------
def quiz_generator(concept):
    prompt = f"Generate 5 quiz questions about {concept} with different question types (multiple choice, true/false, short answer). At the end, provide the answers."
    return generate_response(prompt, max_length=1000)

# -----------------------------
# Gradio UI
# -----------------------------
with gr.Blocks() as app:
    gr.Markdown("## ðŸŽ“ EduTutor - AI Educational Assistant")

    with gr.Tabs():
        # Tab 1 - Concept Explanation
        with gr.TabItem("Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., machine learning")
            explain_btn = gr.Button("Explain")
            explanation_output = gr.Textbox(label="Explanation", lines=10)
            explain_btn.click(fn=concept_explanation, inputs=concept_input, outputs=explanation_output)

        # Tab 2 - Quiz Generator
        with gr.TabItem("Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics")
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz Questions", lines=15)
            quiz_btn.click(fn=quiz_generator, inputs=quiz_input, outputs=quiz_output)

# Launch App (share=True gives a public link if in Colab)
app.launch(share=True)